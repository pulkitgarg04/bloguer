// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id @default(uuid())
  email      String     @unique
  name       String?
  username   String?    @unique
  bio        String?    @default("Hi There, I am using Bloguer!")
  location   String?    @default("Earth")
  password   String
  avatar     String?
  JoinedDate DateTime?  @default(now())
  posts      Post[]
  comments   Comment[]
  bookmarks  Bookmark[]
  following  User[]     @relation("User Follows")
  followers  User[]     @relation("User Follows")
}

model Post {
  id            String     @id @default(uuid())
  title         String
  content       String
  featuredImage String?
  readTime      String?
  published     Boolean    @default(true)
  author        User       @relation(fields: [authorId], references: [id])
  authorId      String
  category      String     @default("Uncategorized")
  views         Int        @default(0)
  Date          DateTime   @default(now())
  bookmarks     Bookmark[]
  comments      Comment[]
  viewsLog      PostView[]
  shares        PostShare[]
}

model Bookmark {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  createdAt DateTime @default(now())
}

model PostView {
  id         String   @id @default(uuid())
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     String
  userId     String?
  ip         String?
  userAgent  String?
  referrer   String?
  visitorId  String?
  country    String?
  source     String?
  isReturning Boolean? @default(false)
  durationSec Int?
  scrollDepth Int?
  createdAt  DateTime @default(now())
}

model PostShare {
  id        String   @id @default(uuid())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  platform  String
  createdAt DateTime @default(now())
}